---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  name: configs.nodebalancer.linode.upbound.io
spec:
  group: nodebalancer.linode.upbound.io
  names:
    categories:
    - crossplane
    - managed
    - linode
    kind: Config
    listKind: ConfigList
    plural: configs
    singular: config
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: READY
      type: string
    - jsonPath: .status.conditions[?(@.type=='Synced')].status
      name: SYNCED
      type: string
    - jsonPath: .metadata.annotations.crossplane\.io/external-name
      name: EXTERNAL-NAME
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Config is the Schema for the Configs API. Manages a Linode NodeBalancer
          Config.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: ConfigSpec defines the desired state of Config
            properties:
              deletionPolicy:
                default: Delete
                description: |-
                  DeletionPolicy specifies what will happen to the underlying external
                  when this managed resource is deleted - either "Delete" or "Orphan" the
                  external resource.
                  This field is planned to be deprecated in favor of the ManagementPolicies
                  field in a future release. Currently, both could be set independently and
                  non-default values would be honored if the feature flag is enabled.
                  See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
                enum:
                - Orphan
                - Delete
                type: string
              forProvider:
                properties:
                  algorithm:
                    description: |-
                      What algorithm this NodeBalancer should use for routing traffic to backends. (roundrobin, leastconn, source)
                      What algorithm this NodeBalancer should use for routing traffic to backends: roundrobin, leastconn, source
                    type: string
                  check:
                    description: |-
                      The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down. If none no check is performed. connection requires only a connection to the backend to succeed. http and http_body rely on the backend serving HTTP, and that the response returned matches what is expected. (none, connection, http, http_body)
                      The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down. If none no check is performed. connection requires only a connection to the backend to succeed. http and http_body rely on the backend serving HTTP, and that the response returned matches what is expected.
                    type: string
                  checkAttempts:
                    description: |-
                      How many times to attempt a check before considering a backend to be down. (1-30)
                      How many times to attempt a check before considering a backend to be down. (1-30)
                    type: number
                  checkBody:
                    description: This value must be present in the response body of
                      the check in order for it to pass. If this value is not present
                      in the response body of a check request, the backend is considered
                      to be down
                    type: string
                  checkInterval:
                    description: |-
                      How often, in seconds, to check that backends are up and serving requests.
                      How often, in seconds, to check that backends are up and serving requests.
                    type: number
                  checkPassive:
                    description: |-
                      If true, any response from this backend with a 5xx status code will be enough for it to be considered unhealthy and taken out of rotation.
                      If true, any response from this backend with a 5xx status code will be enough for it to be considered unhealthy and taken out of rotation.
                    type: boolean
                  checkPath:
                    description: |-
                      The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
                      The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
                    type: string
                  checkTimeout:
                    description: |-
                      How long, in seconds, to wait for a check attempt before considering it failed. (1-30)
                      How long, in seconds, to wait for a check attempt before considering it failed. (1-30)
                    type: number
                  cipherSuite:
                    description: |-
                      What ciphers to use for SSL connections served by this NodeBalancer. legacy is considered insecure and should only be used if necessary.
                      What ciphers to use for SSL connections served by this NodeBalancer. `legacy` is considered insecure and should only be used if necessary.
                    type: string
                  nodebalancerId:
                    description: |-
                      The ID of the NodeBalancer to access.
                      The ID of the NodeBalancer to access.
                    type: number
                  nodebalancerIdRef:
                    description: Reference to a Nodebalancer to populate nodebalancerId.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: |-
                              Resolution specifies whether resolution of this reference is required.
                              The default is 'Required', which means the reconcile will fail if the
                              reference cannot be resolved. 'Optional' means this reference will be
                              a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: |-
                              Resolve specifies when this reference should be resolved. The default
                              is 'IfNotPresent', which will attempt to resolve the reference only when
                              the corresponding field is not present. Use 'Always' to resolve the
                              reference on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  nodebalancerIdSelector:
                    description: Selector for a Nodebalancer to populate nodebalancerId.
                    properties:
                      matchControllerRef:
                        description: |-
                          MatchControllerRef ensures an object with the same controller reference
                          as the selecting object is selected.
                        type: boolean
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: MatchLabels ensures an object with matching labels
                          is selected.
                        type: object
                      policy:
                        description: Policies for selection.
                        properties:
                          resolution:
                            default: Required
                            description: |-
                              Resolution specifies whether resolution of this reference is required.
                              The default is 'Required', which means the reconcile will fail if the
                              reference cannot be resolved. 'Optional' means this reference will be
                              a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: |-
                              Resolve specifies when this reference should be resolved. The default
                              is 'IfNotPresent', which will attempt to resolve the reference only when
                              the corresponding field is not present. Use 'Always' to resolve the
                              reference on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    type: object
                  port:
                    description: |-
                      The TCP port this Config is for. These values must be unique across configs on a single NodeBalancer (you can't have two configs for port 80, for example). While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443. (Defaults to 80)
                      The TCP port this Config is for. These values must be unique across configs on a single NodeBalancer (you can't have two configs for port 80, for example). While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443.
                    type: number
                  protocol:
                    description: |-
                      The protocol this port is configured to serve. If this is set to https you must include an ssl_cert and an ssl_key. (http, https, tcp) (Defaults to http)
                      The protocol this port is configured to serve. If this is set to https you must include an ssl_cert and an ssl_key.
                    type: string
                  proxyProtocol:
                    description: |-
                      The version of ProxyProtocol to use for the underlying NodeBalancer. This requires protocol to be tcp. (none, v1, v2) (Defaults to none)
                      The version of ProxyProtocol to use for the underlying NodeBalancer. This requires protocol to be `tcp`. Valid values are `none`, `v1`, and `v2`.
                    type: string
                  sslCertSecretRef:
                    description: |-
                      The certificate this port is serving. This is not returned. If set, this field will come back as <REDACTED>. Please use the ssl_commonname and ssl_fingerprint to identify the certificate.
                      The certificate this port is serving. This is not returned. If set, this field will come back as `<REDACTED>`. Please use the ssl_commonname and ssl_fingerprint to identify the certificate.
                    properties:
                      key:
                        description: The key to select.
                        type: string
                      name:
                        description: Name of the secret.
                        type: string
                      namespace:
                        description: Namespace of the secret.
                        type: string
                    required:
                    - key
                    - name
                    - namespace
                    type: object
                  sslKeySecretRef:
                    description: |-
                      The private key corresponding to this port's certificate. This is not returned. If set, this field will come back as <REDACTED>. Please use the ssl_commonname and ssl_fingerprint to identify the certificate.
                      The private key corresponding to this port's certificate. This is not returned. If set, this field will come back as `<REDACTED>`. Please use the ssl_commonname and ssl_fingerprint to identify the certificate.
                    properties:
                      key:
                        description: The key to select.
                        type: string
                      name:
                        description: Name of the secret.
                        type: string
                      namespace:
                        description: Namespace of the secret.
                        type: string
                    required:
                    - key
                    - name
                    - namespace
                    type: object
                  stickiness:
                    description: |-
                      Controls how session stickiness is handled on this port. (none, table, http_cookie)
                      Controls how session stickiness is handled on this port: 'none', 'table', 'http_cookie'
                    type: string
                type: object
              initProvider:
                description: |-
                  THIS IS A BETA FIELD. It will be honored
                  unless the Management Policies feature flag is disabled.
                  InitProvider holds the same fields as ForProvider, with the exception
                  of Identifier and other resource reference fields. The fields that are
                  in InitProvider are merged into ForProvider when the resource is created.
                  The same fields are also added to the terraform ignore_changes hook, to
                  avoid updating them after creation. This is useful for fields that are
                  required on creation, but we do not desire to update them after creation,
                  for example because of an external controller is managing them, like an
                  autoscaler.
                properties:
                  algorithm:
                    description: |-
                      What algorithm this NodeBalancer should use for routing traffic to backends. (roundrobin, leastconn, source)
                      What algorithm this NodeBalancer should use for routing traffic to backends: roundrobin, leastconn, source
                    type: string
                  check:
                    description: |-
                      The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down. If none no check is performed. connection requires only a connection to the backend to succeed. http and http_body rely on the backend serving HTTP, and that the response returned matches what is expected. (none, connection, http, http_body)
                      The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down. If none no check is performed. connection requires only a connection to the backend to succeed. http and http_body rely on the backend serving HTTP, and that the response returned matches what is expected.
                    type: string
                  checkAttempts:
                    description: |-
                      How many times to attempt a check before considering a backend to be down. (1-30)
                      How many times to attempt a check before considering a backend to be down. (1-30)
                    type: number
                  checkBody:
                    description: This value must be present in the response body of
                      the check in order for it to pass. If this value is not present
                      in the response body of a check request, the backend is considered
                      to be down
                    type: string
                  checkInterval:
                    description: |-
                      How often, in seconds, to check that backends are up and serving requests.
                      How often, in seconds, to check that backends are up and serving requests.
                    type: number
                  checkPassive:
                    description: |-
                      If true, any response from this backend with a 5xx status code will be enough for it to be considered unhealthy and taken out of rotation.
                      If true, any response from this backend with a 5xx status code will be enough for it to be considered unhealthy and taken out of rotation.
                    type: boolean
                  checkPath:
                    description: |-
                      The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
                      The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
                    type: string
                  checkTimeout:
                    description: |-
                      How long, in seconds, to wait for a check attempt before considering it failed. (1-30)
                      How long, in seconds, to wait for a check attempt before considering it failed. (1-30)
                    type: number
                  cipherSuite:
                    description: |-
                      What ciphers to use for SSL connections served by this NodeBalancer. legacy is considered insecure and should only be used if necessary.
                      What ciphers to use for SSL connections served by this NodeBalancer. `legacy` is considered insecure and should only be used if necessary.
                    type: string
                  nodebalancerId:
                    description: |-
                      The ID of the NodeBalancer to access.
                      The ID of the NodeBalancer to access.
                    type: number
                  nodebalancerIdRef:
                    description: Reference to a Nodebalancer to populate nodebalancerId.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: |-
                              Resolution specifies whether resolution of this reference is required.
                              The default is 'Required', which means the reconcile will fail if the
                              reference cannot be resolved. 'Optional' means this reference will be
                              a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: |-
                              Resolve specifies when this reference should be resolved. The default
                              is 'IfNotPresent', which will attempt to resolve the reference only when
                              the corresponding field is not present. Use 'Always' to resolve the
                              reference on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  nodebalancerIdSelector:
                    description: Selector for a Nodebalancer to populate nodebalancerId.
                    properties:
                      matchControllerRef:
                        description: |-
                          MatchControllerRef ensures an object with the same controller reference
                          as the selecting object is selected.
                        type: boolean
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: MatchLabels ensures an object with matching labels
                          is selected.
                        type: object
                      policy:
                        description: Policies for selection.
                        properties:
                          resolution:
                            default: Required
                            description: |-
                              Resolution specifies whether resolution of this reference is required.
                              The default is 'Required', which means the reconcile will fail if the
                              reference cannot be resolved. 'Optional' means this reference will be
                              a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: |-
                              Resolve specifies when this reference should be resolved. The default
                              is 'IfNotPresent', which will attempt to resolve the reference only when
                              the corresponding field is not present. Use 'Always' to resolve the
                              reference on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    type: object
                  port:
                    description: |-
                      The TCP port this Config is for. These values must be unique across configs on a single NodeBalancer (you can't have two configs for port 80, for example). While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443. (Defaults to 80)
                      The TCP port this Config is for. These values must be unique across configs on a single NodeBalancer (you can't have two configs for port 80, for example). While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443.
                    type: number
                  protocol:
                    description: |-
                      The protocol this port is configured to serve. If this is set to https you must include an ssl_cert and an ssl_key. (http, https, tcp) (Defaults to http)
                      The protocol this port is configured to serve. If this is set to https you must include an ssl_cert and an ssl_key.
                    type: string
                  proxyProtocol:
                    description: |-
                      The version of ProxyProtocol to use for the underlying NodeBalancer. This requires protocol to be tcp. (none, v1, v2) (Defaults to none)
                      The version of ProxyProtocol to use for the underlying NodeBalancer. This requires protocol to be `tcp`. Valid values are `none`, `v1`, and `v2`.
                    type: string
                  stickiness:
                    description: |-
                      Controls how session stickiness is handled on this port. (none, table, http_cookie)
                      Controls how session stickiness is handled on this port: 'none', 'table', 'http_cookie'
                    type: string
                type: object
              managementPolicies:
                default:
                - '*'
                description: |-
                  THIS IS A BETA FIELD. It is on by default but can be opted out
                  through a Crossplane feature flag.
                  ManagementPolicies specify the array of actions Crossplane is allowed to
                  take on the managed and external resources.
                  This field is planned to replace the DeletionPolicy field in a future
                  release. Currently, both could be set independently and non-default
                  values would be honored if the feature flag is enabled. If both are
                  custom, the DeletionPolicy field will be ignored.
                  See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
                  and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
                items:
                  description: |-
                    A ManagementAction represents an action that the Crossplane controllers
                    can take on an external resource.
                  enum:
                  - Observe
                  - Create
                  - Update
                  - Delete
                  - LateInitialize
                  - '*'
                  type: string
                type: array
              providerConfigRef:
                default:
                  name: default
                description: |-
                  ProviderConfigReference specifies how the provider that will be used to
                  create, observe, update, and delete this managed resource should be
                  configured.
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: |-
                          Resolution specifies whether resolution of this reference is required.
                          The default is 'Required', which means the reconcile will fail if the
                          reference cannot be resolved. 'Optional' means this reference will be
                          a no-op if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: |-
                          Resolve specifies when this reference should be resolved. The default
                          is 'IfNotPresent', which will attempt to resolve the reference only when
                          the corresponding field is not present. Use 'Always' to resolve the
                          reference on every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              publishConnectionDetailsTo:
                description: |-
                  PublishConnectionDetailsTo specifies the connection secret config which
                  contains a name, metadata and a reference to secret store config to
                  which any connection details for this managed resource should be written.
                  Connection details frequently include the endpoint, username,
                  and password required to connect to the managed resource.
                properties:
                  configRef:
                    default:
                      name: default
                    description: |-
                      SecretStoreConfigRef specifies which secret store config should be used
                      for this ConnectionSecret.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: |-
                              Resolution specifies whether resolution of this reference is required.
                              The default is 'Required', which means the reconcile will fail if the
                              reference cannot be resolved. 'Optional' means this reference will be
                              a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: |-
                              Resolve specifies when this reference should be resolved. The default
                              is 'IfNotPresent', which will attempt to resolve the reference only when
                              the corresponding field is not present. Use 'Always' to resolve the
                              reference on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  metadata:
                    description: Metadata is the metadata for connection secret.
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: |-
                          Annotations are the annotations to be added to connection secret.
                          - For Kubernetes secrets, this will be used as "metadata.annotations".
                          - It is up to Secret Store implementation for others store types.
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: |-
                          Labels are the labels/tags to be added to connection secret.
                          - For Kubernetes secrets, this will be used as "metadata.labels".
                          - It is up to Secret Store implementation for others store types.
                        type: object
                      type:
                        description: |-
                          Type is the SecretType for the connection secret.
                          - Only valid for Kubernetes Secret Stores.
                        type: string
                    type: object
                  name:
                    description: Name is the name of the connection secret.
                    type: string
                required:
                - name
                type: object
              writeConnectionSecretToRef:
                description: |-
                  WriteConnectionSecretToReference specifies the namespace and name of a
                  Secret to which any connection details for this managed resource should
                  be written. Connection details frequently include the endpoint, username,
                  and password required to connect to the managed resource.
                  This field is planned to be replaced in a future release in favor of
                  PublishConnectionDetailsTo. Currently, both could be set independently
                  and connection details would be published to both without affecting
                  each other.
                properties:
                  name:
                    description: Name of the secret.
                    type: string
                  namespace:
                    description: Namespace of the secret.
                    type: string
                required:
                - name
                - namespace
                type: object
            required:
            - forProvider
            type: object
          status:
            description: ConfigStatus defines the observed state of Config.
            properties:
              atProvider:
                properties:
                  algorithm:
                    description: |-
                      What algorithm this NodeBalancer should use for routing traffic to backends. (roundrobin, leastconn, source)
                      What algorithm this NodeBalancer should use for routing traffic to backends: roundrobin, leastconn, source
                    type: string
                  check:
                    description: |-
                      The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down. If none no check is performed. connection requires only a connection to the backend to succeed. http and http_body rely on the backend serving HTTP, and that the response returned matches what is expected. (none, connection, http, http_body)
                      The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down. If none no check is performed. connection requires only a connection to the backend to succeed. http and http_body rely on the backend serving HTTP, and that the response returned matches what is expected.
                    type: string
                  checkAttempts:
                    description: |-
                      How many times to attempt a check before considering a backend to be down. (1-30)
                      How many times to attempt a check before considering a backend to be down. (1-30)
                    type: number
                  checkBody:
                    description: This value must be present in the response body of
                      the check in order for it to pass. If this value is not present
                      in the response body of a check request, the backend is considered
                      to be down
                    type: string
                  checkInterval:
                    description: |-
                      How often, in seconds, to check that backends are up and serving requests.
                      How often, in seconds, to check that backends are up and serving requests.
                    type: number
                  checkPassive:
                    description: |-
                      If true, any response from this backend with a 5xx status code will be enough for it to be considered unhealthy and taken out of rotation.
                      If true, any response from this backend with a 5xx status code will be enough for it to be considered unhealthy and taken out of rotation.
                    type: boolean
                  checkPath:
                    description: |-
                      The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
                      The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
                    type: string
                  checkTimeout:
                    description: |-
                      How long, in seconds, to wait for a check attempt before considering it failed. (1-30)
                      How long, in seconds, to wait for a check attempt before considering it failed. (1-30)
                    type: number
                  cipherSuite:
                    description: |-
                      What ciphers to use for SSL connections served by this NodeBalancer. legacy is considered insecure and should only be used if necessary.
                      What ciphers to use for SSL connections served by this NodeBalancer. `legacy` is considered insecure and should only be used if necessary.
                    type: string
                  id:
                    type: string
                  nodeStatus:
                    description: A structure containing information about the health
                      of the backends for this port. This information is updated periodically
                      as checks are performed against backends.
                    items:
                      properties:
                        down:
                          description: The number of backends considered to be 'DOWN'
                            and unhealthy. These are not in rotation, and not serving
                            requests.
                          type: number
                        up:
                          description: The number of backends considered to be 'UP'
                            and healthy, and that are serving requests.
                          type: number
                      type: object
                    type: array
                  nodebalancerId:
                    description: |-
                      The ID of the NodeBalancer to access.
                      The ID of the NodeBalancer to access.
                    type: number
                  port:
                    description: |-
                      The TCP port this Config is for. These values must be unique across configs on a single NodeBalancer (you can't have two configs for port 80, for example). While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443. (Defaults to 80)
                      The TCP port this Config is for. These values must be unique across configs on a single NodeBalancer (you can't have two configs for port 80, for example). While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443.
                    type: number
                  protocol:
                    description: |-
                      The protocol this port is configured to serve. If this is set to https you must include an ssl_cert and an ssl_key. (http, https, tcp) (Defaults to http)
                      The protocol this port is configured to serve. If this is set to https you must include an ssl_cert and an ssl_key.
                    type: string
                  proxyProtocol:
                    description: |-
                      The version of ProxyProtocol to use for the underlying NodeBalancer. This requires protocol to be tcp. (none, v1, v2) (Defaults to none)
                      The version of ProxyProtocol to use for the underlying NodeBalancer. This requires protocol to be `tcp`. Valid values are `none`, `v1`, and `v2`.
                    type: string
                  sslCommonname:
                    description: |-
                      The read-only common name automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
                      The read-only common name automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
                    type: string
                  sslFingerprint:
                    description: |-
                      The read-only fingerprint automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
                      The read-only fingerprint automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
                    type: string
                  stickiness:
                    description: |-
                      Controls how session stickiness is handled on this port. (none, table, http_cookie)
                      Controls how session stickiness is handled on this port: 'none', 'table', 'http_cookie'
                    type: string
                type: object
              conditions:
                description: Conditions of the resource.
                items:
                  description: A Condition that may apply to a resource.
                  properties:
                    lastTransitionTime:
                      description: |-
                        LastTransitionTime is the last time this condition transitioned from one
                        status to another.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        A Message containing details about this condition's last transition from
                        one status to another, if any.
                      type: string
                    reason:
                      description: A Reason for this condition's last transition from
                        one status to another.
                      type: string
                    status:
                      description: Status of this condition; is it currently True,
                        False, or Unknown?
                      type: string
                    type:
                      description: |-
                        Type of this condition. At most one of each condition type may apply to
                        a resource at any point in time.
                      type: string
                  required:
                  - lastTransitionTime
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
