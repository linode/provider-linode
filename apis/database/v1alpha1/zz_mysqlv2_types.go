/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MySQLv2InitParameters struct {

	// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use linode_database_access_controls to manage your allow list separately.
	// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
	// +listType=set
	AllowList []*string `json:"allowList,omitempty" tf:"allow_list,omitempty"`

	// The number of Linode Instance nodes deployed to the Managed Database. (default 1)
	// The number of Linode instance nodes deployed to the Managed Database.
	ClusterSize *float64 `json:"clusterSize,omitempty" tf:"cluster_size,omitempty"`

	// The Managed Database engine in engine/version format. (e.g. mysql)
	// The unique ID of the database engine and version to use. (e.g. mysql/8)
	EngineID *string `json:"engineId,omitempty" tf:"engine_id,omitempty"`

	// The database timestamp from which it was restored.
	// The database timestamp from which it was restored.
	ForkRestoreTime *string `json:"forkRestoreTime,omitempty" tf:"fork_restore_time,omitempty"`

	// The ID of the database that was forked from.
	// The ID of the database that was forked from.
	ForkSource *float64 `json:"forkSource,omitempty" tf:"fork_source,omitempty"`

	// A unique, user-defined string referring to the Managed Database.
	// A unique, user-defined string referring to the Managed Database.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The region to use for the Managed Database.
	// The Region ID for the Managed Database.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Whether this Managed Database should be suspended.
	// Whether this database is suspended.
	Suspended *bool `json:"suspended,omitempty" tf:"suspended,omitempty"`

	// The Linode Instance type used for the nodes of the Managed Database.
	// The Linode Instance type used by the Managed Database for its nodes.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Configuration settings for automated patch update maintenance for the Managed Database.
	Updates map[string]string `json:"updates,omitempty" tf:"updates,omitempty"`
}

type MySQLv2Observation struct {

	// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use linode_database_access_controls to manage your allow list separately.
	// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
	// +listType=set
	AllowList []*string `json:"allowList,omitempty" tf:"allow_list,omitempty"`

	// The number of Linode Instance nodes deployed to the Managed Database. (default 1)
	// The number of Linode instance nodes deployed to the Managed Database.
	ClusterSize *float64 `json:"clusterSize,omitempty" tf:"cluster_size,omitempty"`

	// When this Managed Database was created.
	// When this Managed Database was created.
	Created *string `json:"created,omitempty" tf:"created,omitempty"`

	// Whether the Managed Databases is encrypted.
	// Whether the Managed Databases is encrypted.
	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted,omitempty"`

	// The Managed Database engine. (e.g. mysql)
	// The Managed Database engine in engine/version format.
	Engine *string `json:"engine,omitempty" tf:"engine,omitempty"`

	// The Managed Database engine in engine/version format. (e.g. mysql)
	// The unique ID of the database engine and version to use. (e.g. mysql/8)
	EngineID *string `json:"engineId,omitempty" tf:"engine_id,omitempty"`

	// The database timestamp from which it was restored.
	// The database timestamp from which it was restored.
	ForkRestoreTime *string `json:"forkRestoreTime,omitempty" tf:"fork_restore_time,omitempty"`

	// The ID of the database that was forked from.
	// The ID of the database that was forked from.
	ForkSource *float64 `json:"forkSource,omitempty" tf:"fork_source,omitempty"`

	// The primary host for the Managed Database.
	// The primary host for the Managed Database.
	HostPrimary *string `json:"hostPrimary,omitempty" tf:"host_primary,omitempty"`

	// The secondary/private host for the managed database.
	// The secondary/private host for the Managed Database.
	HostSecondary *string `json:"hostSecondary,omitempty" tf:"host_secondary,omitempty"`

	// The ID of the Managed Database.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A unique, user-defined string referring to the Managed Database.
	// A unique, user-defined string referring to the Managed Database.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// A mapping between IP addresses and strings designating them as primary or failover.
	// +mapType=granular
	Members map[string]*string `json:"members,omitempty" tf:"members,omitempty"`

	// The oldest time to which a database can be restored.
	OldestRestoreTime *string `json:"oldestRestoreTime,omitempty" tf:"oldest_restore_time,omitempty"`

	// A set of pending updates.
	// A set of pending updates.
	PendingUpdates []PendingUpdatesObservation `json:"pendingUpdates,omitempty" tf:"pending_updates,omitempty"`

	// The back-end platform for relational databases used by the service.
	// The back-end platform for relational databases used by the service.
	Platform *string `json:"platform,omitempty" tf:"platform,omitempty"`

	// The access port for this Managed Database.
	// The access port for this Managed Database.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The region to use for the Managed Database.
	// The Region ID for the Managed Database.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Whether to require SSL credentials to establish a connection to the Managed Database.
	// Whether to require SSL credentials to establish a connection to the Managed Database.
	SSLConnection *bool `json:"sslConnection,omitempty" tf:"ssl_connection,omitempty"`

	// The operating status of the Managed Database.
	// The operating status of the Managed Database.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Whether this Managed Database should be suspended.
	// Whether this database is suspended.
	Suspended *bool `json:"suspended,omitempty" tf:"suspended,omitempty"`

	// The Linode Instance type used for the nodes of the Managed Database.
	// The Linode Instance type used by the Managed Database for its nodes.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// When this Managed Database was last updated.
	// When this Managed Database was last updated.
	Updated *string `json:"updated,omitempty" tf:"updated,omitempty"`

	// Configuration settings for automated patch update maintenance for the Managed Database.
	Updates map[string]string `json:"updates,omitempty" tf:"updates,omitempty"`

	// The Managed Database engine version. (e.g. 13.2)
	// The Managed Database engine version.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type MySQLv2Parameters struct {

	// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use linode_database_access_controls to manage your allow list separately.
	// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
	// +kubebuilder:validation:Optional
	// +listType=set
	AllowList []*string `json:"allowList,omitempty" tf:"allow_list,omitempty"`

	// The number of Linode Instance nodes deployed to the Managed Database. (default 1)
	// The number of Linode instance nodes deployed to the Managed Database.
	// +kubebuilder:validation:Optional
	ClusterSize *float64 `json:"clusterSize,omitempty" tf:"cluster_size,omitempty"`

	// The Managed Database engine in engine/version format. (e.g. mysql)
	// The unique ID of the database engine and version to use. (e.g. mysql/8)
	// +kubebuilder:validation:Optional
	EngineID *string `json:"engineId,omitempty" tf:"engine_id,omitempty"`

	// The database timestamp from which it was restored.
	// The database timestamp from which it was restored.
	// +kubebuilder:validation:Optional
	ForkRestoreTime *string `json:"forkRestoreTime,omitempty" tf:"fork_restore_time,omitempty"`

	// The ID of the database that was forked from.
	// The ID of the database that was forked from.
	// +kubebuilder:validation:Optional
	ForkSource *float64 `json:"forkSource,omitempty" tf:"fork_source,omitempty"`

	// A unique, user-defined string referring to the Managed Database.
	// A unique, user-defined string referring to the Managed Database.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The region to use for the Managed Database.
	// The Region ID for the Managed Database.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Whether this Managed Database should be suspended.
	// Whether this database is suspended.
	// +kubebuilder:validation:Optional
	Suspended *bool `json:"suspended,omitempty" tf:"suspended,omitempty"`

	// The Linode Instance type used for the nodes of the Managed Database.
	// The Linode Instance type used by the Managed Database for its nodes.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Configuration settings for automated patch update maintenance for the Managed Database.
	// +kubebuilder:validation:Optional
	Updates map[string]string `json:"updates,omitempty" tf:"updates,omitempty"`
}

type PendingUpdatesInitParameters struct {
}

type PendingUpdatesObservation struct {

	// The time when a mandatory update needs to be applied.
	Deadline *string `json:"deadline,omitempty" tf:"deadline,omitempty"`

	// A description of the update.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The date and time a maintenance update will be applied.
	PlannedFor *string `json:"plannedFor,omitempty" tf:"planned_for,omitempty"`
}

type PendingUpdatesParameters struct {
}

// MySQLv2Spec defines the desired state of MySQLv2
type MySQLv2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MySQLv2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MySQLv2InitParameters `json:"initProvider,omitempty"`
}

// MySQLv2Status defines the observed state of MySQLv2.
type MySQLv2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MySQLv2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// MySQLv2 is the Schema for the MySQLv2s API. Manages a Linode MySQL Database.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,linode}
type MySQLv2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.engineId) || (has(self.initProvider) && has(self.initProvider.engineId))",message="spec.forProvider.engineId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.label) || (has(self.initProvider) && has(self.initProvider.label))",message="spec.forProvider.label is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.region) || (has(self.initProvider) && has(self.initProvider.region))",message="spec.forProvider.region is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   MySQLv2Spec   `json:"spec"`
	Status MySQLv2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MySQLv2List contains a list of MySQLv2s
type MySQLv2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MySQLv2 `json:"items"`
}

// Repository type metadata.
var (
	MySQLv2_Kind             = "MySQLv2"
	MySQLv2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MySQLv2_Kind}.String()
	MySQLv2_KindAPIVersion   = MySQLv2_Kind + "." + CRDGroupVersion.String()
	MySQLv2_GroupVersionKind = CRDGroupVersion.WithKind(MySQLv2_Kind)
)

func init() {
	SchemeBuilder.Register(&MySQLv2{}, &MySQLv2List{})
}
