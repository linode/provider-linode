/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BucketAccessObservation struct {

	// The unique label of the bucket to which the key will grant limited access.
	// The unique label of the bucket to which the key will grant limited access.
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// The Object Storage cluster where a bucket to which the key is granting access is hosted.
	// The Object Storage cluster where a bucket to which the key is granting access is hosted.
	Cluster *string `json:"cluster,omitempty" tf:"cluster,omitempty"`

	// This Limited Access Key’s permissions for the selected bucket. Changing  (read_write, read_only)
	// This Limited Access Key’s permissions for the selected bucket.
	Permissions *string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type BucketAccessParameters struct {

	// The unique label of the bucket to which the key will grant limited access.
	// The unique label of the bucket to which the key will grant limited access.
	// +kubebuilder:validation:Required
	BucketName *string `json:"bucketName" tf:"bucket_name,omitempty"`

	// The Object Storage cluster where a bucket to which the key is granting access is hosted.
	// The Object Storage cluster where a bucket to which the key is granting access is hosted.
	// +kubebuilder:validation:Required
	Cluster *string `json:"cluster" tf:"cluster,omitempty"`

	// This Limited Access Key’s permissions for the selected bucket. Changing  (read_write, read_only)
	// This Limited Access Key’s permissions for the selected bucket.
	// +kubebuilder:validation:Required
	Permissions *string `json:"permissions" tf:"permissions,omitempty"`
}

type KeyObservation struct {

	// Defines this key as a Limited Access Key. Limited Access Keys restrict this Object Storage key’s access to only the bucket(s) declared in this array and define their bucket-level permissions. Not providing this block will not limit this Object Storage Key.
	// A list of permissions to grant this limited access key.
	BucketAccess []BucketAccessObservation `json:"bucketAccess,omitempty" tf:"bucket_access,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The label given to this key. For display purposes only.
	// The label given to this key. For display purposes only.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Whether or not this key is a limited access key.
	// Whether or not this key is a limited access key.
	Limited *bool `json:"limited,omitempty" tf:"limited,omitempty"`
}

type KeyParameters struct {

	// Defines this key as a Limited Access Key. Limited Access Keys restrict this Object Storage key’s access to only the bucket(s) declared in this array and define their bucket-level permissions. Not providing this block will not limit this Object Storage Key.
	// A list of permissions to grant this limited access key.
	// +kubebuilder:validation:Optional
	BucketAccess []BucketAccessParameters `json:"bucketAccess,omitempty" tf:"bucket_access,omitempty"`

	// The label given to this key. For display purposes only.
	// The label given to this key. For display purposes only.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`
}

// KeySpec defines the desired state of Key
type KeySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KeyParameters `json:"forProvider"`
}

// KeyStatus defines the observed state of Key.
type KeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Key is the Schema for the Keys API. Manages a Linode Object Storage Key.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,linode}
type Key struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.label)",message="label is a required parameter"
	Spec   KeySpec   `json:"spec"`
	Status KeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeyList contains a list of Keys
type KeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Key `json:"items"`
}

// Repository type metadata.
var (
	Key_Kind             = "Key"
	Key_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Key_Kind}.String()
	Key_KindAPIVersion   = Key_Kind + "." + CRDGroupVersion.String()
	Key_GroupVersionKind = CRDGroupVersion.WithKind(Key_Kind)
)

func init() {
	SchemeBuilder.Register(&Key{}, &KeyList{})
}
