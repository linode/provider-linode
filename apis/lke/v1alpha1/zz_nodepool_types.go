/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NodePoolAutoscalerInitParameters struct {

	// The maximum number of nodes to autoscale to.
	Max *float64 `json:"max,omitempty" tf:"max,omitempty"`

	// The minimum number of nodes to autoscale to.
	Min *float64 `json:"min,omitempty" tf:"min,omitempty"`
}

type NodePoolAutoscalerObservation struct {

	// The maximum number of nodes to autoscale to.
	Max *float64 `json:"max,omitempty" tf:"max,omitempty"`

	// The minimum number of nodes to autoscale to.
	Min *float64 `json:"min,omitempty" tf:"min,omitempty"`
}

type NodePoolAutoscalerParameters struct {

	// The maximum number of nodes to autoscale to.
	// +kubebuilder:validation:Optional
	Max *float64 `json:"max" tf:"max,omitempty"`

	// The minimum number of nodes to autoscale to.
	// +kubebuilder:validation:Optional
	Min *float64 `json:"min" tf:"min,omitempty"`
}

type NodePoolInitParameters struct {
	Autoscaler []NodePoolAutoscalerInitParameters `json:"autoscaler,omitempty" tf:"autoscaler,omitempty"`

	// ID of the LKE Cluster where to create the current Node Pool.
	// The ID of the cluster to associate this node pool with.
	// +crossplane:generate:reference:type=Cluster
	ClusterID *float64 `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a Cluster to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// A map attribute containing key-value pairs to be added as labels to nodes in the node pool. Labels help classify your nodes and to easily select subsets of objects. To learn more, review Add Labels and Taints to your LKE Node Pools.
	// Key-value pairs added as labels to nodes in the node pool. Labels help classify your nodes and to easily select subsets of objects.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The number of nodes in the Node Pool. If undefined with an autoscaler the initial node count will equal the autoscaler minimum.
	// The number of nodes in the Node Pool.
	NodeCount *float64 `json:"nodeCount,omitempty" tf:"node_count,omitempty"`

	// An array of tags applied to the Node Pool. Tags can be used to flag node pools as externally managed, see Externally Managed Node Pools for more details.
	// An array of tags applied to this object. Tags are for organizational purposes only.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically allowing them to repel certain pods.
	Taint []TaintInitParameters `json:"taint,omitempty" tf:"taint,omitempty"`

	// A Linode Type for all nodes in the Node Pool. See all node types here.
	// The type of node pool.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NodePoolNodesInitParameters struct {
}

type NodePoolNodesObservation struct {

	// The ID of the Node Pool within LKE Cluster.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the underlying Linode instance.
	InstanceID *float64 `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// The status of the node. (ready, not_ready)
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type NodePoolNodesParameters struct {
}

type NodePoolObservation struct {
	Autoscaler []NodePoolAutoscalerObservation `json:"autoscaler,omitempty" tf:"autoscaler,omitempty"`

	// ID of the LKE Cluster where to create the current Node Pool.
	// The ID of the cluster to associate this node pool with.
	ClusterID *float64 `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// The disk encryption policy for nodes in this pool.
	// The disk encryption policy for nodes in this pool. NOTE: Disk encryption may not currently be available to all users.
	DiskEncryption *string `json:"diskEncryption,omitempty" tf:"disk_encryption,omitempty"`

	// The ID of the Node Pool within LKE Cluster.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A map attribute containing key-value pairs to be added as labels to nodes in the node pool. Labels help classify your nodes and to easily select subsets of objects. To learn more, review Add Labels and Taints to your LKE Node Pools.
	// Key-value pairs added as labels to nodes in the node pool. Labels help classify your nodes and to easily select subsets of objects.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The number of nodes in the Node Pool. If undefined with an autoscaler the initial node count will equal the autoscaler minimum.
	// The number of nodes in the Node Pool.
	NodeCount *float64 `json:"nodeCount,omitempty" tf:"node_count,omitempty"`

	// A list of nodes in the node pool.
	Nodes []NodePoolNodesObservation `json:"nodes,omitempty" tf:"nodes,omitempty"`

	// An array of tags applied to the Node Pool. Tags can be used to flag node pools as externally managed, see Externally Managed Node Pools for more details.
	// An array of tags applied to this object. Tags are for organizational purposes only.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically allowing them to repel certain pods.
	Taint []TaintObservation `json:"taint,omitempty" tf:"taint,omitempty"`

	// A Linode Type for all nodes in the Node Pool. See all node types here.
	// The type of node pool.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NodePoolParameters struct {

	// +kubebuilder:validation:Optional
	Autoscaler []NodePoolAutoscalerParameters `json:"autoscaler,omitempty" tf:"autoscaler,omitempty"`

	// ID of the LKE Cluster where to create the current Node Pool.
	// The ID of the cluster to associate this node pool with.
	// +crossplane:generate:reference:type=Cluster
	// +kubebuilder:validation:Optional
	ClusterID *float64 `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a Cluster to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// A map attribute containing key-value pairs to be added as labels to nodes in the node pool. Labels help classify your nodes and to easily select subsets of objects. To learn more, review Add Labels and Taints to your LKE Node Pools.
	// Key-value pairs added as labels to nodes in the node pool. Labels help classify your nodes and to easily select subsets of objects.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The number of nodes in the Node Pool. If undefined with an autoscaler the initial node count will equal the autoscaler minimum.
	// The number of nodes in the Node Pool.
	// +kubebuilder:validation:Optional
	NodeCount *float64 `json:"nodeCount,omitempty" tf:"node_count,omitempty"`

	// An array of tags applied to the Node Pool. Tags can be used to flag node pools as externally managed, see Externally Managed Node Pools for more details.
	// An array of tags applied to this object. Tags are for organizational purposes only.
	// +kubebuilder:validation:Optional
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically allowing them to repel certain pods.
	// +kubebuilder:validation:Optional
	Taint []TaintParameters `json:"taint,omitempty" tf:"taint,omitempty"`

	// A Linode Type for all nodes in the Node Pool. See all node types here.
	// The type of node pool.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TaintInitParameters struct {

	// The Kubernetes taint effect. Accepted values are NoSchedule, PreferNoSchedule, and NoExecute. For the descriptions of these values, see Kubernetes Taints and Tolerations.
	// The Kubernetes taint effect.
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// The Kubernetes taint key.
	// The Kubernetes taint key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The Kubernetes taint value.
	// The Kubernetes taint value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TaintObservation struct {

	// The Kubernetes taint effect. Accepted values are NoSchedule, PreferNoSchedule, and NoExecute. For the descriptions of these values, see Kubernetes Taints and Tolerations.
	// The Kubernetes taint effect.
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// The Kubernetes taint key.
	// The Kubernetes taint key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The Kubernetes taint value.
	// The Kubernetes taint value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TaintParameters struct {

	// The Kubernetes taint effect. Accepted values are NoSchedule, PreferNoSchedule, and NoExecute. For the descriptions of these values, see Kubernetes Taints and Tolerations.
	// The Kubernetes taint effect.
	// +kubebuilder:validation:Optional
	Effect *string `json:"effect" tf:"effect,omitempty"`

	// The Kubernetes taint key.
	// The Kubernetes taint key.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// The Kubernetes taint value.
	// The Kubernetes taint value.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

// NodePoolSpec defines the desired state of NodePool
type NodePoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NodePoolParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NodePoolInitParameters `json:"initProvider,omitempty"`
}

// NodePoolStatus defines the observed state of NodePool.
type NodePoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NodePoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NodePool is the Schema for the NodePools API. Manages an LKE Node Pool.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,linode}
type NodePool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   NodePoolSpec   `json:"spec"`
	Status NodePoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NodePoolList contains a list of NodePools
type NodePoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NodePool `json:"items"`
}

// Repository type metadata.
var (
	NodePool_Kind             = "NodePool"
	NodePool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NodePool_Kind}.String()
	NodePool_KindAPIVersion   = NodePool_Kind + "." + CRDGroupVersion.String()
	NodePool_GroupVersionKind = CRDGroupVersion.WithKind(NodePool_Kind)
)

func init() {
	SchemeBuilder.Register(&NodePool{}, &NodePoolList{})
}
