// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RDNSInitParameters struct {

	// The Public IPv4 or IPv6 address that will receive the PTR record.  A matching A or AAAA record must exist.
	// The public Linode IPv4 or IPv6 address to operate on.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// The name of the RDNS address.
	// The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
	Rdns *string `json:"rdns,omitempty" tf:"rdns,omitempty"`

	// If true, the RDNS assignment will be retried within the operation timeout period.
	// If true, the RDNS assignment will be retried within the operation timeout period.
	WaitForAvailable *bool `json:"waitForAvailable,omitempty" tf:"wait_for_available,omitempty"`
}

type RDNSObservation struct {

	// The Public IPv4 or IPv6 address that will receive the PTR record.  A matching A or AAAA record must exist.
	// The public Linode IPv4 or IPv6 address to operate on.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the RDNS address.
	// The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
	Rdns *string `json:"rdns,omitempty" tf:"rdns,omitempty"`

	// If true, the RDNS assignment will be retried within the operation timeout period.
	// If true, the RDNS assignment will be retried within the operation timeout period.
	WaitForAvailable *bool `json:"waitForAvailable,omitempty" tf:"wait_for_available,omitempty"`
}

type RDNSParameters struct {

	// The Public IPv4 or IPv6 address that will receive the PTR record.  A matching A or AAAA record must exist.
	// The public Linode IPv4 or IPv6 address to operate on.
	// +kubebuilder:validation:Optional
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// The name of the RDNS address.
	// The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
	// +kubebuilder:validation:Optional
	Rdns *string `json:"rdns,omitempty" tf:"rdns,omitempty"`

	// If true, the RDNS assignment will be retried within the operation timeout period.
	// If true, the RDNS assignment will be retried within the operation timeout period.
	// +kubebuilder:validation:Optional
	WaitForAvailable *bool `json:"waitForAvailable,omitempty" tf:"wait_for_available,omitempty"`
}

// RDNSSpec defines the desired state of RDNS
type RDNSSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RDNSParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RDNSInitParameters `json:"initProvider,omitempty"`
}

// RDNSStatus defines the observed state of RDNS.
type RDNSStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RDNSObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RDNS is the Schema for the RDNSs API. Manages the RDNS / PTR record for the IP Address associated with a Linode Instance.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,linode}
type RDNS struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.address) || (has(self.initProvider) && has(self.initProvider.address))",message="spec.forProvider.address is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rdns) || (has(self.initProvider) && has(self.initProvider.rdns))",message="spec.forProvider.rdns is a required parameter"
	Spec   RDNSSpec   `json:"spec"`
	Status RDNSStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RDNSList contains a list of RDNSs
type RDNSList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RDNS `json:"items"`
}

// Repository type metadata.
var (
	RDNS_Kind             = "RDNS"
	RDNS_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RDNS_Kind}.String()
	RDNS_KindAPIVersion   = RDNS_Kind + "." + CRDGroupVersion.String()
	RDNS_GroupVersionKind = CRDGroupVersion.WithKind(RDNS_Kind)
)

func init() {
	SchemeBuilder.Register(&RDNS{}, &RDNSList{})
}
