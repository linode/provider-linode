// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPv6RangeInitParameters struct {

	// The ID of the Linode to assign this range to. This field may be updated to reassign the IPv6 range.
	// The ID of the Linode to assign this range to.
	// +crossplane:generate:reference:type=github.com/linode/provider-linode/apis/instance/v1alpha1.Instance
	LinodeID *float64 `json:"linodeId,omitempty" tf:"linode_id,omitempty"`

	// Reference to a Instance in instance to populate linodeId.
	// +kubebuilder:validation:Optional
	LinodeIDRef *v1.Reference `json:"linodeIdRef,omitempty" tf:"-"`

	// Selector for a Instance in instance to populate linodeId.
	// +kubebuilder:validation:Optional
	LinodeIDSelector *v1.Selector `json:"linodeIdSelector,omitempty" tf:"-"`

	// The prefix length of the IPv6 range.
	// The prefix length of the IPv6 range.
	PrefixLength *float64 `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	// The IPv6 SLAAC address to assign this range to.
	// The IPv6 SLAAC address to assign this range to.
	RouteTarget *string `json:"routeTarget,omitempty" tf:"route_target,omitempty"`
}

type IPv6RangeObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Whether this IPv6 range is shared.
	// Whether this IPv6 range is shared.
	IsBGP *bool `json:"isBgp,omitempty" tf:"is_bgp,omitempty"`

	// The ID of the Linode to assign this range to. This field may be updated to reassign the IPv6 range.
	// The ID of the Linode to assign this range to.
	LinodeID *float64 `json:"linodeId,omitempty" tf:"linode_id,omitempty"`

	// A list of Linodes targeted by this IPv6 range. Includes Linodes with IP sharing.
	// A list of Linodes targeted by this IPv6 range.Includes Linodes with IP sharing.
	// +listType=set
	Linodes []*float64 `json:"linodes,omitempty" tf:"linodes,omitempty"`

	// The prefix length of the IPv6 range.
	// The prefix length of the IPv6 range.
	PrefixLength *float64 `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	// The IPv6 range of addresses in this pool.
	// The IPv6 range of addresses in this pool.
	Range *string `json:"range,omitempty" tf:"range,omitempty"`

	// The region for this range of IPv6 addresses.
	// The region for this range of IPv6 addresses.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The IPv6 SLAAC address to assign this range to.
	// The IPv6 SLAAC address to assign this range to.
	RouteTarget *string `json:"routeTarget,omitempty" tf:"route_target,omitempty"`
}

type IPv6RangeParameters struct {

	// The ID of the Linode to assign this range to. This field may be updated to reassign the IPv6 range.
	// The ID of the Linode to assign this range to.
	// +crossplane:generate:reference:type=github.com/linode/provider-linode/apis/instance/v1alpha1.Instance
	// +kubebuilder:validation:Optional
	LinodeID *float64 `json:"linodeId,omitempty" tf:"linode_id,omitempty"`

	// Reference to a Instance in instance to populate linodeId.
	// +kubebuilder:validation:Optional
	LinodeIDRef *v1.Reference `json:"linodeIdRef,omitempty" tf:"-"`

	// Selector for a Instance in instance to populate linodeId.
	// +kubebuilder:validation:Optional
	LinodeIDSelector *v1.Selector `json:"linodeIdSelector,omitempty" tf:"-"`

	// The prefix length of the IPv6 range.
	// The prefix length of the IPv6 range.
	// +kubebuilder:validation:Optional
	PrefixLength *float64 `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	// The IPv6 SLAAC address to assign this range to.
	// The IPv6 SLAAC address to assign this range to.
	// +kubebuilder:validation:Optional
	RouteTarget *string `json:"routeTarget,omitempty" tf:"route_target,omitempty"`
}

// IPv6RangeSpec defines the desired state of IPv6Range
type IPv6RangeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IPv6RangeParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IPv6RangeInitParameters `json:"initProvider,omitempty"`
}

// IPv6RangeStatus defines the observed state of IPv6Range.
type IPv6RangeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IPv6RangeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// IPv6Range is the Schema for the IPv6Ranges API. Manages a Linode IPv6 range.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,linode}
type IPv6Range struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.prefixLength) || (has(self.initProvider) && has(self.initProvider.prefixLength))",message="spec.forProvider.prefixLength is a required parameter"
	Spec   IPv6RangeSpec   `json:"spec"`
	Status IPv6RangeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IPv6RangeList contains a list of IPv6Ranges
type IPv6RangeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IPv6Range `json:"items"`
}

// Repository type metadata.
var (
	IPv6Range_Kind             = "IPv6Range"
	IPv6Range_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IPv6Range_Kind}.String()
	IPv6Range_KindAPIVersion   = IPv6Range_Kind + "." + CRDGroupVersion.String()
	IPv6Range_GroupVersionKind = CRDGroupVersion.WithKind(IPv6Range_Kind)
)

func init() {
	SchemeBuilder.Register(&IPv6Range{}, &IPv6RangeList{})
}
