// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NodebalancerInitParameters struct {

	// Throttle connections per second (0-20). Set to 0 (default) to disable throttling.
	// Throttle connections per second (0-20). Set to 0 (zero) to disable throttling.
	ClientConnThrottle *float64 `json:"clientConnThrottle,omitempty" tf:"client_conn_throttle,omitempty"`

	// ID for the firewall you'd like to use with this NodeBalancer.
	FirewallID *float64 `json:"firewallId,omitempty" tf:"firewall_id,omitempty"`

	// The label of the Linode NodeBalancer
	// The label of the Linode NodeBalancer.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The region where this NodeBalancer will be deployed.  Examples are "us-east", "us-west", "ap-south", etc. See all regions here.  Changing .
	// The region where this NodeBalancer will be deployed.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// A list of tags applied to this object. Tags are for organizational purposes only.
	// An array of tags applied to this object. Tags are for organizational purposes only.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type NodebalancerObservation struct {

	// Throttle connections per second (0-20). Set to 0 (default) to disable throttling.
	// Throttle connections per second (0-20). Set to 0 (zero) to disable throttling.
	ClientConnThrottle *float64 `json:"clientConnThrottle,omitempty" tf:"client_conn_throttle,omitempty"`

	// When this NodeBalancer was created
	// When this NodeBalancer was created.
	Created *string `json:"created,omitempty" tf:"created,omitempty"`

	// ID for the firewall you'd like to use with this NodeBalancer.
	FirewallID *float64 `json:"firewallId,omitempty" tf:"firewall_id,omitempty"`

	// This NodeBalancer's hostname, ending with .nodebalancer.linode.com
	// This NodeBalancer's hostname, ending with .nodebalancer.linode.com
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The Public IPv4 Address of this NodeBalancer
	// The Public IPv4 Address of this NodeBalancer
	IPv4 *string `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	// The Public IPv6 Address of this NodeBalancer
	// The Public IPv6 Address of this NodeBalancer
	IPv6 *string `json:"ipv6,omitempty" tf:"ipv6,omitempty"`

	// The label of the Linode NodeBalancer
	// The label of the Linode NodeBalancer.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The region where this NodeBalancer will be deployed.  Examples are "us-east", "us-west", "ap-south", etc. See all regions here.  Changing .
	// The region where this NodeBalancer will be deployed.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// A list of tags applied to this object. Tags are for organizational purposes only.
	// An array of tags applied to this object. Tags are for organizational purposes only.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Information about the amount of transfer this NodeBalancer has had so far this month.
	Transfer []TransferObservation `json:"transfer,omitempty" tf:"transfer,omitempty"`

	// When this NodeBalancer was last updated.
	// When this NodeBalancer was last updated.
	Updated *string `json:"updated,omitempty" tf:"updated,omitempty"`
}

type NodebalancerParameters struct {

	// Throttle connections per second (0-20). Set to 0 (default) to disable throttling.
	// Throttle connections per second (0-20). Set to 0 (zero) to disable throttling.
	// +kubebuilder:validation:Optional
	ClientConnThrottle *float64 `json:"clientConnThrottle,omitempty" tf:"client_conn_throttle,omitempty"`

	// ID for the firewall you'd like to use with this NodeBalancer.
	// +kubebuilder:validation:Optional
	FirewallID *float64 `json:"firewallId,omitempty" tf:"firewall_id,omitempty"`

	// The label of the Linode NodeBalancer
	// The label of the Linode NodeBalancer.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The region where this NodeBalancer will be deployed.  Examples are "us-east", "us-west", "ap-south", etc. See all regions here.  Changing .
	// The region where this NodeBalancer will be deployed.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// A list of tags applied to this object. Tags are for organizational purposes only.
	// An array of tags applied to this object. Tags are for organizational purposes only.
	// +kubebuilder:validation:Optional
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type TransferInitParameters struct {
}

type TransferObservation struct {

	// The total transfer, in MB, used by this NodeBalancer for the current month
	In *float64 `json:"in,omitempty" tf:"in,omitempty"`

	// The total inbound transfer, in MB, used for this NodeBalancer for the current month
	Out *float64 `json:"out,omitempty" tf:"out,omitempty"`

	// The total outbound transfer, in MB, used for this NodeBalancer for the current month
	Total *float64 `json:"total,omitempty" tf:"total,omitempty"`
}

type TransferParameters struct {
}

// NodebalancerSpec defines the desired state of Nodebalancer
type NodebalancerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NodebalancerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NodebalancerInitParameters `json:"initProvider,omitempty"`
}

// NodebalancerStatus defines the observed state of Nodebalancer.
type NodebalancerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NodebalancerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Nodebalancer is the Schema for the Nodebalancers API. Manages a Linode NodeBalancer.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,linode}
type Nodebalancer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NodebalancerSpec   `json:"spec"`
	Status            NodebalancerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NodebalancerList contains a list of Nodebalancers
type NodebalancerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Nodebalancer `json:"items"`
}

// Repository type metadata.
var (
	Nodebalancer_Kind             = "Nodebalancer"
	Nodebalancer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Nodebalancer_Kind}.String()
	Nodebalancer_KindAPIVersion   = Nodebalancer_Kind + "." + CRDGroupVersion.String()
	Nodebalancer_GroupVersionKind = CRDGroupVersion.WithKind(Nodebalancer_Kind)
)

func init() {
	SchemeBuilder.Register(&Nodebalancer{}, &NodebalancerList{})
}
